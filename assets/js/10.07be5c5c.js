(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{371:function(a,t,e){"use strict";e.r(t);var s=e(44),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"commands"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commands"}},[a._v("#")]),a._v(" Commands")]),a._v(" "),e("p",[a._v("A CLI is provided to support building and managing an Anchor workspace.\nFor a comprehensive list of commands and options, run "),e("code",[a._v("anchor -h")]),a._v(" on any\nof the following subcommands.")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor-cli\n\nUSAGE:\n    anchor <SUBCOMMAND>\n\nFLAGS:\n    -h, --help       Prints help information\n    -V, --version    Prints version information\n\nSUBCOMMANDS:\n    build      Builds the workspace\n    cluster    Cluster commands\n    deploy     Deploys each program in the workspace\n    help       Prints this message or the help of the given subcommand(s)\n    idl        Commands for interacting with interface definitions\n    init       Initializes a workspace\n    launch     Deploys, initializes an IDL, and migrates all in one command\n    migrate    Runs the deploy migration script\n    new        Creates a new program\n    test       Runs integration tests against a localnetwork\n    upgrade    Upgrades a single program. The configured wallet must be the upgrade authority\n    verify     Verifies the on-chain bytecode matches the locally compiled artifact. Run this\n               command inside a program subdirectory, i.e., in the dir containing the program's\n               Cargo.toml\n")])])]),e("h2",{attrs:{id:"init"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#init"}},[a._v("#")]),a._v(" Init")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor init\n")])])]),e("p",[a._v("Initializes a project workspace wit the following structure.")]),a._v(" "),e("ul",[e("li",[e("code",[a._v("Anchor.toml")]),a._v(": Anchor configuration file.")]),a._v(" "),e("li",[e("code",[a._v("Cargo.toml")]),a._v(": Rust workspace configuration file.")]),a._v(" "),e("li",[e("code",[a._v("programs/")]),a._v(": Directory for Solana program crates.")]),a._v(" "),e("li",[e("code",[a._v("app/")]),a._v(": Directory for your application frontend.")]),a._v(" "),e("li",[e("code",[a._v("tests/")]),a._v(": Directory for JavaScript integration tests.")]),a._v(" "),e("li",[e("code",[a._v("migrations/deploy.js")]),a._v(": Deploy script.")])]),a._v(" "),e("h2",{attrs:{id:"build"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#build"}},[a._v("#")]),a._v(" Build")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor build\n")])])]),e("p",[a._v("Builds programs in the workspace targeting Solana's BPF runtime and emitting IDLs in the "),e("code",[a._v("target/idl")]),a._v(" directory.")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor build --verifiable\n")])])]),e("p",[a._v("Runs the build inside a docker image so that the output binary is deterministic (assuming a Cargo.lock file is used). This command must be run from within a single crate subdirectory within the workspace. For example, "),e("code",[a._v("programs/<my-program>/")]),a._v(".")]),a._v(" "),e("h2",{attrs:{id:"deploy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deploy"}},[a._v("#")]),a._v(" Deploy")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor deploy\n")])])]),e("p",[a._v("Deploys all programs in the workspace to the configured cluster.")]),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("Note")]),a._v(" "),e("p",[a._v("This is different from the "),e("code",[a._v("solana program deploy")]),a._v(" command, because everytime it's run\nit will generate a "),e("em",[a._v("new")]),a._v(" program address.")])]),a._v(" "),e("h2",{attrs:{id:"upgrade"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#upgrade"}},[a._v("#")]),a._v(" Upgrade")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor upgrade <target/deploy/program.so> --program-id <program-id>\n")])])]),e("p",[a._v("Uses Solana's upgradeable BPF loader to upgrade the on chain program code.")]),a._v(" "),e("h2",{attrs:{id:"test"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#test"}},[a._v("#")]),a._v(" Test")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor test\n")])])]),e("p",[a._v("Run an integration test suit against the configured cluster, deploying new versions\nof all workspace programs before running them.")]),a._v(" "),e("p",[a._v("If the configured network is a localnet, then automatically starts the localnetwork and runs\nthe test.")]),a._v(" "),e("p",[a._v("When running tests we stream program logs to .anchor/program-logs/")]),e("address",[a._v("."),e("program-name",[a._v(".log"),e("p"),a._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[a._v("Note")]),a._v(" "),e("p",[a._v("The Anchor workflow "),e("a",{attrs:{href:"https://www.parity.io/paritys-checklist-for-secure-smart-contract-development/",target:"_blank",rel:"noopener noreferrer"}},[a._v("recommends"),e("OutboundLink")],1),a._v("\nto test your program using integration tests in a language other\nthan Rust to make sure that bugs related to syntax misunderstandings\nare coverable with tests and not just replicated in tests.")])]),a._v(" "),e("h2",{attrs:{id:"migrate"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#migrate"}},[a._v("#")]),a._v(" Migrate")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor migrate\n")])])]),e("p",[a._v("Runs the deploy script located at "),e("code",[a._v("migrations/deploy.js")]),a._v(", injecting a provider configured\nform the workspace's "),e("code",[a._v("Anchor.toml")]),a._v(". For example,")]),a._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// File: migrations/deploys.js")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" anchor "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[a._v('"@project-serum/anchor"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\nmodule"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[a._v("exports")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("async")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("provider")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  anchor"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("setProvider")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("provider"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// Add your deploy script here.")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),e("p",[a._v("Migrations are a new feature\nand only support this simple deploy script at the moment.")]),a._v(" "),e("h2",{attrs:{id:"idl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#idl"}},[a._v("#")]),a._v(" Idl")]),a._v(" "),e("p",[a._v("The "),e("code",[a._v("idl")]),a._v(" subcommand provides commands for interacting with interface definition files.\nIt's recommended to use these commands to store an IDL on chain, at a deterministic\naddress, as a function of nothing but the the program's ID. This\nallow us to generate clients for a program using nothing but the program ID.")]),a._v(" "),e("h3",{attrs:{id:"idl-init"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#idl-init"}},[a._v("#")]),a._v(" Idl Init")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor idl init -f <target/idl/program.json> <program-id>\n")])])]),e("p",[a._v("Creates an idl account, writing the given "),e("code",[a._v("<target/idl/program.json>")]),a._v(" file into a program owned account. By default, the size of the account is double the size of the IDL,\nallowing room for growth in case the idl needs to be upgraded in the future.")]),a._v(" "),e("h3",{attrs:{id:"idl-fetch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#idl-fetch"}},[a._v("#")]),a._v(" Idl Fetch")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor idl fetch -o <out-file.json> <program-id>\n")])])]),e("p",[a._v("Fetches an IDL from the configured blockchain. For example, make sure\nyour "),e("code",[a._v("Anchor.toml")]),a._v(" is pointing to the "),e("code",[a._v("mainnet")]),a._v(" cluster and run")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor idl fetch GrAkKfEpTKQuVHG2Y97Y2FF4i7y7Q5AHLK94JBy7Y5yv\n")])])]),e("h3",{attrs:{id:"idl-authority"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#idl-authority"}},[a._v("#")]),a._v(" Idl Authority")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor idl authority <program-id>\n")])])]),e("p",[a._v("Outputs the IDL account's authority. This is the wallet that has the ability to\nupdate the IDL.")]),a._v(" "),e("h3",{attrs:{id:"idl-erase-authority"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#idl-erase-authority"}},[a._v("#")]),a._v(" Idl Erase Authority")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor idl erase-authority -p <program-id>\n")])])]),e("p",[a._v("Erases the IDL account's authority so that upgrades can no longer occur. The\nconfigured wallet must be the current authority.")]),a._v(" "),e("h3",{attrs:{id:"idl-upgrade"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#idl-upgrade"}},[a._v("#")]),a._v(" Idl Upgrade")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor idl upgrade <program-id> -f <target/idl/program.json>\n")])])]),e("p",[a._v("Upgrades the IDL file on chain to the new "),e("code",[a._v("target/idl/program.json")]),a._v(" idl.\nThe configured wallet must be the current authority.")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor idl set-authority -n <new-authority> -p <program-id>\n")])])]),e("p",[a._v("Sets a new authority on the IDL account. Both the "),e("code",[a._v("new-authority")]),a._v(" and "),e("code",[a._v("program-id")]),a._v("\nmust be encoded in base 58.")]),a._v(" "),e("h2",{attrs:{id:"launch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#launch"}},[a._v("#")]),a._v(" Launch")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor launch\n")])])]),e("p",[a._v("Builds, deploys and migrates, all in one command. This is particularly\nuseful when simultaneously developing an app against a Localnet or Devnet. For mainnet, it's\nrecommended to run each command separately, since transactions can sometimes be\nunreliable depending on the Solana RPC node being used.")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor launch --verifiable\n")])])]),e("p",[a._v("Runs the build inside a docker image so that the output binary is deterministic (assuming a Cargo.lock file is used).")]),a._v(" "),e("h2",{attrs:{id:"new"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#new"}},[a._v("#")]),a._v(" New")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor new <program-name>\n")])])]),e("p",[a._v("Creates a new program in the workspace's "),e("code",[a._v("programs/")]),a._v(" directory initialized with boilerplate.")]),a._v(" "),e("h2",{attrs:{id:"cluster"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cluster"}},[a._v("#")]),a._v(" Cluster")]),a._v(" "),e("h3",{attrs:{id:"cluster-list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cluster-list"}},[a._v("#")]),a._v(" Cluster list")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor cluster list\n")])])]),e("p",[a._v("This lists cluster endpoints:")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("Cluster Endpoints:\n\n* Mainnet - https://solana-api.projectserum.com\n* Mainnet - https://api.mainnet-beta.solana.com\n* Devnet  - https://api.devnet.solana.com\n* Testnet - https://api.testnet.solana.com\n")])])]),e("h2",{attrs:{id:"verify"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#verify"}},[a._v("#")]),a._v(" Verify")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("anchor verify <program-id>\n")])])]),e("p",[a._v("Verifies the on-chain bytecode matches the locally compiled artifact.")])])],1)])}),[],!1,null,null,null);t.default=r.exports}}]);